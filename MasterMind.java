import java.io.*;
import java.util.*;

/**
 * The MasterMind program simulates Master-mind game.
 * It allows the user to play against the computer.
 * The computer generates the correct answer and evaluates the guesses provided by the user
 * and gives hints and scores after each guess.
 *
 * @author Yucan Zhang
 * 
 */


/**
 * MasterMind main class, generates the game and user interface
 * @author Yucan Zhang
 *
 */
public class MasterMind 
{
	//input from the keyboard
	private Scanner keyboard;
	private String input;
	
	//user decides which mode to use, 4 holes and 6 colors, or 5 holes and 7 colors.
	private static int mode;
	private final int STANDARD_MODE = 6;
	private final int CHALLENGE_MODE = 7;
	//two-dimensional array stores all guesses and key pegs
	private char[][] guess;
	private char[][] key;
	//char arry stores the answer generated by the computer
	private char[] answer;
	//class object MMAnswer generates the answer for each game
	private MMAnswer answerGenerator;
	//boolean value indicates the play wins the game
	private boolean winner;
	//class object MMGuess compares the guesses to the answer 
	//and provides scores of each game including hits and number of guesses
	private MMGuess guessEvaluator;
	private int totalGuesses;
	private int guessCount;
	private int hintsUsed = 0; // The amount of times someuse used a hint
	
	
	/**
	 * MasterMind constructor with mode setting
	 * @param mode the integer indicates the number of colors of the game, 
	 * 		  6: 4 holes and 6 colors; 7: 5 holes and 7 colors
	 */
	public MasterMind(int mode)
	{
		MasterMind.mode = mode;
		keyboard = new Scanner(System.in);
		winner = false;
		answerGenerator = new MMAnswer(STANDARD_MODE);
		answer = answerGenerator.getAnswer();
		totalGuesses = 0;
		guessCount = 0;
		guess = new char[60][mode - 2];
		key = new char[60][mode - 2];
	}//MasterMind constructor with mode setting

	/**
	 * MasterMind constructor enables the keyboard input
	 */
	public MasterMind() 
	{
		keyboard = new Scanner(System.in);
	}//MasterMind constructor


	public static void main(String[] args) throws IOException
	{
		showInstructionMessage();
		
		//make sure the input is in correct format
		boolean successfulStart = false;
		
		MasterMind MMGame;
		int mode = 0;
		
		//a loop generates multiple games as long as the play would like to continue
		do
		{
			successfulStart = false;
			
			//a minimal initialized game enables the keyboard input
			MMGame = new MasterMind();
			
			//ask user to play or quit the game
			successfulStart = MMGame.startNewGame();
			
			//check the answer from the user and starts the game
			if (successfulStart)
			{
				//ask the user for the difficulty level of the game, 2 modes
				MMGame.setMode();
				
				//generate a new game with the user-defined mode setting
				mode = MMGame.getMode();
				MMGame = new MasterMind(mode);
			
				//generate answer based on the user-defined mode
				MMGame.answerGenerator = new MMAnswer(mode);
				MMGame.answer = MMGame.answerGenerator.getAnswer();
				
				//a loop asks the user to input all the guesses, each loop generates one guess
				//displays the key pegs, scores and total number of guesses at the end of each guess
				do
				{
					//ask the user to input one guess contains desired number of holes, 4 or 5, based on the user-defined mode
					//store each guess into the two-dimensional array
					MMGame.guess[MMGame.totalGuesses] = MMGame.getGuess();
					//compares the guess to the answer
					MMGame.guessEvaluator = new MMGuess(MMGame.guess[MMGame.totalGuesses], MMGame.answer);
					//check whether the user wins the game
					MMGame.winner = MMGame.guessEvaluator.evaluateGuess();
					//store each key into the two-dimensional arry for each guess
					MMGame.key[MMGame.totalGuesses] = MMGame.guessEvaluator.getKey();
					MMGame.guessEvaluator.getSingleHits();
					// Compute the total number of guesses
					MMGame.guessCount++;

					//display the key pegs for each guess
					System.out.print("\n                                                                         Your hits: ");
					for(int i = 0; i <= MMGame.key[MMGame.totalGuesses].length - 1; i++)
						System.out.print(MMGame.key[MMGame.totalGuesses][i] + " ");
					System.out.println();
					MMGame.totalGuesses ++;
					/*System.out.println("\nX = right color and right position, 2 points\n" +
						               "x = right color but wrong position, 1 point\n" + 
							           "0, color not exist");
					System.out.println("--------------------------------------------------------------------");
                                         
					//display the total points from scores of individual guesses
					System.out.print("Total points earned: " + MMGame.totalHits + "  ");
					
					System.out.println("Total number of guesses: " + MMGame.totalGuesses);
					System.out.println("********************************************************************");*/	
				}
				//check whether the user wins the game
				//if not, ask the user whether continue the game or start over or need a hint before next guess
				while (!MMGame.winner && MMGame.continueCurrentGame());
				
				//the current game ends if the user wins the game
				if (MMGame.winner)
				{
					// Show Contratulations and single game stats					
					System.out.println("Congratulations! You win!");
					System.out.println("********************************************************************");
					System.out.println("It took you " + MMGame.guessCount + " guesses.");
					System.out.println("********************************************************************");
					System.out.println("");
					
					// Save the game data
					// class object MMStatistics generates the Statistics Controller for each game
					MMStatistics statsController = new MMStatistics();
					statsController.saveStats(MMGame.guessCount, mode);
					
				}				
			}
			//game over if the user is not ready for the game
			else
			{
				break;
			}
		}
		//a new game will start if the user is ready for a new game
		while (successfulStart);
	}//main

	/**
	 * This function displays the instruction messages of the game at the beginning of the game.
	 */
	public static void showInstructionMessage()
	{
		System.out.println("Welcome to MasterMind by Tony Sweet, Ben Witte, and Yucan Zhang");
		System.out.println("*****************************************************************************");
		System.out.println("Instructions:");
		System.out.println("1. Choose the difficulty mode for each new game");
		System.out.println("   - s standard mode : 4 pegs that can be 6 diffrent colors as the code");
		System.out.println("   - c challenge mode: 5 pegs that can be 7 diffrent colors as the code");
		System.out.println("   - h hint          : displays a hint if you are stuck");
		System.out.println("2. Guess colors (order matters) from the list of colors provided");
		System.out.println("3. Each guess will be compared to the random computer generated answer"); 
		System.out.println("   H indicates a guessed color exists in the answer at the right position");
		System.out.println("   h indicates a guessed color exists in the answer but its in the wrong position");
		System.out.println("   m indicates a guessed color is a miss - it does not exist in the answer");
		System.out.println("*****************************************************************************");
		System.out.println("");
	}//showInstructionMessage()
	
	
	/**
	 * Asks the user whether the user wants to start a new game
	 * System exits if the user doesn't want to play
	 * @return successfulStart 
	 * <br> user's answer for want to play?
	 */
	public boolean startNewGame() throws IOException
	{
		//keeps track of valid input
		boolean successfulStart = false;
		boolean successfulInputResetStat = false;
		
		//a loop prompts the user with the same question if the input is not valid
		do
		{
			System.out.println("Ready to start a new game? y = yes, n = no, s = show stats");
			input = keyboard.nextLine();
			
			if (input.equalsIgnoreCase("y") || input.equalsIgnoreCase("yes"))
			{
				successfulStart = true;
				return true;
			}
			else if (input.equalsIgnoreCase("n") || input.equalsIgnoreCase("no"))
			{
				System.out.println("Thank you for playing! Bye!");
				successfulStart = true;
				return false;
			}
			else if (input.equalsIgnoreCase("s") || input.equalsIgnoreCase("show stats"))
			{
				System.out.println("*****************************************************");
				System.out.println("MasterMind Statistics");
				System.out.println("***************************");
				System.out.println("Standard Mode");
				MMStatistics stats = new MMStatistics();
				stats.displayStats(STANDARD_MODE);
				System.out.println("***************************");
				System.out.println("Advanced Mode");
				stats.displayStats(CHALLENGE_MODE);
				System.out.println("*****************************************************");
				
				do
				{
					System.out.println("Would you like to reset the statistics? y = yes; n = no");
					input = keyboard.nextLine();
					if (input.equalsIgnoreCase("y") || input.equalsIgnoreCase("yes"))
					{
						successfulInputResetStat = true;
						stats.clearStats();
					}
					else if (input.equalsIgnoreCase("n") || input.equalsIgnoreCase("no"))
					{
						successfulInputResetStat = true;
					}
					else
					{
						System.out.println("Error in reading your input.");
					}
				}
				while ( !successfulInputResetStat );
				successfulStart = false;
			}
			else
			{
				System.out.println("Error in reading your input.");
				successfulStart = false;
			}
		}
		//keep looping if the input is not valid
		while(!successfulStart);
		
		return successfulStart;
	}//startNewGame()
	
	/**
	 * Sets the mode of the game based on user's input
	 * @return successfulSetMode
	 * <br> valid input of the user's answer to which difficulty level want to play?
	 */
	public boolean setMode()
	{
		//keeps track of valid input
		boolean successfulSetMode = false;
		//a loop prompts the user with the same question if the input is not valid
		do
		{
			System.out.println("Please choose: s = standard mode ( 4 pegs/6 colors)");
			System.out.println("               c = challenge mode( 5 pegs/7 colors)");
			input = keyboard.nextLine();
			
			if (input.equalsIgnoreCase("s"))
			{
				mode = STANDARD_MODE;
				successfulSetMode = true;
				return true;
			}
			else if (input.equalsIgnoreCase("c"))
			{
				mode = CHALLENGE_MODE;
				successfulSetMode = true;
				return true;
			}
			else
			{
				System.out.println("Error in reading your input.");
				successfulSetMode = false;
			}
		}
		//keep looping if the input is not valid
		while (!successfulSetMode);
		
		return successfulSetMode;
	}//setMode()
	
	/**
	 * Gets the user-defined game mode
	 * @return mode 
	 * <br> the user-defined game mode
	 */
	public int getMode()
	{
		return mode;
	}//getMode()
	
	/**
	 * loops to input 4 or 5 colors for each guess
	 * @return guess[]
	 * <br> the guessed colors defined by the user
	 */
	public char[] getGuess()
	{
		//user will enter one color at a time
		int colorPosition = 1;
		//keep track of the valid input for each color
		boolean successfulGetGuess = false;

		//a loop keeps asking the user to enter the correct number of colors for a guess
		do
		{
			//4 colors need for a guess in the standard mode
			if (mode == STANDARD_MODE)
			{
				guess[totalGuesses] = new char[4];
				System.out.println("Please choose four colors from:");
				System.out.println("r = red   o = orange   y = yellow   g = green   b = blue   i = indigo");
				successfulGetGuess = getColorInput(colorPosition);

				for(colorPosition = 2; colorPosition <= 4 && successfulGetGuess; colorPosition ++)
				{
					successfulGetGuess = false;
					successfulGetGuess = getColorInput(colorPosition);
				}			
			}
			
			//5 colors needed for a guess in the challenge mode
			if (mode == CHALLENGE_MODE)
			{
				guess[totalGuesses] = new char[5];
				System.out.println("Please choose the colors for 5 holes from:");
				System.out.println("r = red   o = orange   y = yellow   g = green   b = blue   i = indigo   v = violet");				
				successfulGetGuess = getColorInput(colorPosition);

				for (colorPosition = 2; colorPosition <= 5 && successfulGetGuess; colorPosition ++)
				{
					successfulGetGuess = false;
					successfulGetGuess = getColorInput(colorPosition);
				}				
			}
			
			//reminds the user if errors occur in the input
			if (!successfulGetGuess)
			{
				System.out.println("Problem with getting your guess.");
			}
		}
		//keep looping if the input is invalid and ask the user whether wants to continue or start over or get a hint
		while  ((!successfulGetGuess) && continueCurrentGame());
		
		//display the guess defined by the user
                
		System.out.print("\n                                                                        Your guess: ");
		for (int i = 0; i <= guess[totalGuesses].length - 1; i++)
		{
				System.out.print(guess[totalGuesses][i] + " ");
			
		}
		System.out.println();
		
		return guess[totalGuesses];
	}//getGuess()
	
	/**
	 * Prompts the user to guess one color at indicated position
	 * @param colorPosition 
	 * 		  the position of the color in the guess
	 * @return successfulGetColor
	 * <br>indicates the input of the guessed color from the user is valid
	 */
	public boolean getColorInput(int colorPosition)
	{
		//keeps track of the valid input for each color
		boolean successfulGetColor = false;
		
		//choose from 6 colors in the standard mode
		if (mode == STANDARD_MODE)
		{
			do
			{
				switch (colorPosition)
				{
				case 1:
					System.out.print("Color of peg 1: ");
					break;
				case 2:
					System.out.print("Color of peg 2: ");
					break;
				case 3:
					System.out.print("Color of peg 3: ");
					break;
				case 4:
					System.out.print("Color of peg 4: ");
					break;
				}
				input = keyboard.nextLine();
				if ( input.equalsIgnoreCase("r") || input.equalsIgnoreCase("red"))
				{
					guess[totalGuesses][colorPosition - 1] = 'r';
					successfulGetColor = true;
					return true;
				}
				else if (input.equalsIgnoreCase("o") || input.equalsIgnoreCase("orange"))
				{
					guess[totalGuesses][colorPosition - 1] = 'o';
					successfulGetColor = true;
					return true;
				}
				else if (input.equalsIgnoreCase("y") || input.equalsIgnoreCase("yellow"))
				{
					guess[totalGuesses][colorPosition - 1] = 'y';
					successfulGetColor = true;
					return true;
				}
				else if (input.equalsIgnoreCase("g") || input.equalsIgnoreCase("green"))
				{
					guess[totalGuesses][colorPosition - 1] = 'g';
					successfulGetColor = true;
					return true;
				}
				else if (input.equalsIgnoreCase("b") || input.equalsIgnoreCase("blue"))
				{
					guess[totalGuesses][colorPosition - 1] = 'b';
					successfulGetColor = true;
					return true;
				}
                                else if (input.equalsIgnoreCase("i") || input.equalsIgnoreCase("indigo"))
				{
					guess[totalGuesses][colorPosition - 1] = 'i';
					successfulGetColor = true;
					return true;
				}
				else
				{
					System.out.println("Error in reading you input.");	
					successfulGetColor = false;
				}
			}
			while (!successfulGetColor);
			
			return successfulGetColor;
		}
		
		//choose from 7 colors in the standard mode
		if (mode == CHALLENGE_MODE)
		{			
			do
			{
				switch (colorPosition)
				{
				case 1:
					System.out.print("Color of peg 1: ");
					break;
				case 2:
					System.out.print("Color of peg 2: ");
					break;
				case 3:
					System.out.print("Color of peg 3: ");
					break;
				case 4:
					System.out.print("Color of peg 4: ");
					break;
				case 5:
					System.out.print("Color of peg 5: ");
					break;
				}
				
				input = keyboard.nextLine();
				if ( input.equalsIgnoreCase("r") || input.equalsIgnoreCase("red"))
				{
					guess[totalGuesses][colorPosition - 1] = 'r';
					successfulGetColor = true;
					return true;
				}
				else if (input.equalsIgnoreCase("o") || input.equalsIgnoreCase("orange"))
				{
					guess[totalGuesses][colorPosition - 1] = 'o';
					successfulGetColor = true;
					return true;
				}
				else if (input.equalsIgnoreCase("y") || input.equalsIgnoreCase("yellow"))
				{
					guess[totalGuesses][colorPosition - 1] = 'y';
					successfulGetColor = true;
					return true;
				}
				else if (input.equalsIgnoreCase("g") || input.equalsIgnoreCase("green"))
				{
					guess[totalGuesses][colorPosition - 1] = 'g';
					successfulGetColor = true;
					return true;
				}
				else if (input.equalsIgnoreCase("b") || input.equalsIgnoreCase("blue"))
				{
					guess[totalGuesses][colorPosition - 1] = 'b';
					successfulGetColor = true;
					return true;
				}
				else if (input.equalsIgnoreCase("i") || input.equalsIgnoreCase("indigo"))
				{
					guess[totalGuesses][colorPosition - 1] = 'i';
					successfulGetColor = true;
					return true;
				}
				else if (input.equalsIgnoreCase("v") || input.equalsIgnoreCase("violet"))
				{
					guess[totalGuesses][colorPosition - 1] = 'v';
					successfulGetColor = true;
					return true;
				}
				else
				{
					System.out.println("Error in reading you input.");
					successfulGetColor = false;
				}
			}
			while (!successfulGetColor);
			
			return successfulGetColor;
		}
		
		return successfulGetColor;
	}//getColorInput(int)

	/**
	 * Prompts the user whether continue the current game or start a new game or need a hint;
	 * displays the summary of all guesses before continue to enter a new guess
	 * @return successfulContinueCurrentGame
	 * <br> user's answer to whether wants to continue or start over
	 */
	public boolean continueCurrentGame()
	{
		boolean successfulContinueCurrentGame = false;
		//loops if the input is not valid
		do
		{
			System.out.println("\nWould you like to continue or start a new game or get a hint?\n" +
					           "c = continue\ns = start a new game\nh = hint.");
			input = keyboard.nextLine();
			
			//display a summary of all the guesses before continue to enter a new guess
			if (input.equalsIgnoreCase("c") || input.equalsIgnoreCase("continue"))
			{
				showSummaryMessage();
				return true;
			}
			//start a new game
			else if (input.equalsIgnoreCase("s") || input.equalsIgnoreCase("start"))
				return false;
			
			else if (input.equalsIgnoreCase("h") || input.equalsIgnoreCase("hint"))
			{
				MMHint hint = new MMHint(answer, hintsUsed);
				hintsUsed = hint.getHint();
                                showSummaryMessage();
				return true;
			}
			
			//invalid input
			else
			{
				System.out.println("Error in reading your input.");
				successfulContinueCurrentGame = false;
			}
		}
		//loops if the input is invalid
		while (!successfulContinueCurrentGame);
		
		return successfulContinueCurrentGame;
	}//continueCurrentGame()
	
	/**
	 * This function displays the summary of all the guesses which have been made by the user in the current game.
	 */
	public void showSummaryMessage()
	{
		System.out.println("                                                           ********************************************");
		System.out.println("                                                                        Summary of guesses:");
		for (int i = 0; i <= totalGuesses - 1; i++)
		{
			System.out.print("                                                                        Guess " + (i + 1) + ": ");

			for (int j = 0; j <= guess[totalGuesses - 1].length - 1; j++)
			{
				System.out.print(guess[i][j] + " ");
			}
			System.out.print("   ");
			
			for (int j = 0; j <= key[totalGuesses].length - 1; j++)
			{
				System.out.print(key[i][j] + " ");
			}
			System.out.println();

		}
		System.out.println("                                                           ********************************************");
	}
	
}//MasterMind main class