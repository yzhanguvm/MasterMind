import java.util.*;

/**
 * The MasterMind program simulates Master-mind game.
 * It allows the user to play against the computer.
 * The computer generates the correct answer and evaluates the guesses provided by the user
 * and gives hints and scores after each guess.
 *
 * @author Yucan Zhang
 * 
 */
 
/**
 * This class compares the guesses made by the user to the answer made by the computer and 
 * keeps track of the score of each guess
 */
public class MMGuess
{
	private char[] answer;
	private char[] key;
	private char[] guess;
	private boolean[] guessUsed;
	private boolean[] answerUsed;
	private int singleHits;
	
	/**
	 * Constructs a MMGuess object which compares two char arrays.
	 * @param guess
	 * the char array indicates the guess made by the user
	 * @param answer
	 * the char array indicates the answer made by the computer
	 */
	public MMGuess(char[] guess, char[] answer)
	{
		this.answer = answer;
		this.guess = guess;
		//the lengths of the key, guess and answer are determined by the mode passed from the main game 
		key = new char[answer.length];
		guessUsed = new boolean[answer.length];
		answerUsed = new boolean[answer.length];
		singleHits = 0;
		
		for(int i = 0; i <= answer.length - 1; i++)
		{
			key[i] = 'm';
            guessUsed[i] = false;
			answerUsed[i] = false;

		}

	}//MMGuess(char[], char[])


	/**
	 * Compares the guess to the answer and generates the key pegs
	 * @return checks whether the guess perfectly matches the answer
	 */
	public boolean evaluateGuess()
	{
		//checks whether the guessed color is the perfect match (right color, right position)
		for (int i = 0; i <= answer.length - 1; i++)
		{
			if (guess[i] == answer[i] && guessUsed[i] == false && answerUsed[i] == false)
			{
				key[i] = 'H';
				guessUsed[i] = true;
				answerUsed[i] = true;
				//2 points for a perfect match
				singleHits += 2;
			}
		}
			
		//checks whether the non-perfect matched color is a close match
		for (int i = 0; i <= answer.length - 1; i++)
		{
			if (guessUsed[i] == false)
			{
				for (int j = 0; j <= answer.length - 1; j ++)
				{
					if (guess[i] == answer[j] && guessUsed[i] == false && answerUsed[j] == false)
					{
						key[i] = 'h';
						guessUsed[i] = true;
						answerUsed[j] = true;
						//1 point for a close match
						singleHits ++;
					}
						
				}
			}
		}
		
		//check whether the guess perfectly matches the answer, if yes, the user wins the game
		if (singleHits == 2 * key.length)
			return true;
		else
			return false;
	}//evaluateGuess()
	
	/**
	 * Returns the key pegs generated by comparing individual color in the guess and answer
	 * @return a char array containing the key pegs
	 */
	public char[] getKey() 
	{
            Arrays.sort(key);
		return key;
	}//getKey()


	/**
	 * Returns the score of each guess by comparing it to the answer
	 * @return the score of each guess
	 */
	public int getSingleHits() 
	{
		return singleHits;
	}//getSingleHits()


	/**
	 * Returns a String object representing this MMGuess object.
	 * @return a string representation of this object.
	 */
	public String toString() 
	{
		return "MMGuess [answer=" + Arrays.toString(answer) + ", key="
				+ Arrays.toString(key) + ", guess=" + Arrays.toString(guess)
				+ ", guessUsed=" + Arrays.toString(guessUsed) + ", answerUsed="
				+ Arrays.toString(answerUsed) + ", singleHits=" + singleHits + " ]";
	}//toString()


	//tester for MMGuess class
	public static void main (String args[])
	{
		char[] testGuess1 = {'r','o','g','c'};
		char[] testAns1 = {'r','o','g','c'};
		MMGuess tester1 = new MMGuess(testGuess1, testAns1);
		if (tester1.evaluateGuess())
			System.out.println("win");
		if (!tester1.evaluateGuess())
			System.out.println("lose");
		System.out.println(tester1);
		
		
		char[] testGuess2 = {'c','o','g','c'};
		char[] testAns2 = {'r','o','o','c'};
		MMGuess tester2 = new MMGuess(testGuess2, testAns2);
		if (tester2.evaluateGuess())
			System.out.println("win");
		if (!tester2.evaluateGuess())
			System.out.println("lose");
		System.out.println(tester2);
	
	}//tester for MMGuess class
	
}//MMGuess class

